from django.core.management.base import BaseCommand
from django.utils import timezone
from django.contrib.auth import get_user_model
from datetime import datetime
from tasks.models import Task, DeliveredTask
from payments.models import Payment  # Adjust path if needed

User = get_user_model()

class Command(BaseCommand):
    help = 'Ensure old tasks are fully paid and delivered.'

    def handle(self, *args, **options):
        cutoff_date = datetime(2025, 5, 23, tzinfo=timezone.get_current_timezone())
        admin_user = User.objects.get(id=1)

        tasks = Task.objects.filter(created_at__lt=cutoff_date)
        self.stdout.write(f"Checking {tasks.count()} tasks created before {cutoff_date.date()}...")

        for task in tasks:
            # 1. Ensure at least one payment exists
            payment_exists = Payment.objects.filter(task=task).exists()
            if not payment_exists:
                Payment.objects.create(
                    task=task,
                    amount=task.final_price,
                    payment_type="Full Payment",
                    payment_method=task.payment_method,
                    paid_by=admin_user,
                    notes="Auto-generated by script",
                    payment_date=timezone.now().date()
                )
                self.stdout.write(f"[+] Created full payment for task {task.id}")
            
            # 2. Update task's paid_status
            task.paid_status = 'P'  # Paid
            task.save(update_fields=['paid_status'])

            # 3. Ensure task has a DeliveredTask
            delivered_task, created = DeliveredTask.objects.get_or_create(main_task=task)
            delivered_task.delivered_by = admin_user
            delivered_task.created_by = admin_user
            delivered_task.received_person = delivered_task.received_person or "Auto-delivered"
            delivered_task.is_delivered = True
            delivered_task.notes = delivered_task.notes or "Auto-marked as delivered"
            delivered_task.save()

            if created:
                self.stdout.write(f"[+] Created DeliveredTask for task {task.id}")
            else:
                self.stdout.write(f"[✓] Updated DeliveredTask for task {task.id}")

        self.stdout.write("✅ All tasks processed.")
